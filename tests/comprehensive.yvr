define below_max_length(arg: BV[8]*, max_length: INT) -> BOOL:
	null_terminated, cond: BOOL
	i: INT
	val: BV[8]
	null_terminated = false
	i = 0
	LABEL LOOP: if i >= max_length goto END
	val = *arg
	i = i + 1
	arg = arg + 1
	cond = val == BV{0, 8}
	null_terminated = cond | null_terminated
	goto LOOP
	LABEL END: return null_terminated

define sum(arr: ARRAY{BV[8]}, len: INT) -> INT:
	s, t, i: INT
	elem: BV[8]
	i = 0
	s = 0
	LABEL LOOP: if i >= len goto END
	elem = arr[i]
	call t = bv2nat(elem)
	s = s + t
	i = i + 1
	goto LOOP
	LABEL END: i = 0
	return s

define play_game(buttons: ARRAY{BOOL}, map: ARRAY{BV[8]}) -> BV[16]:
	i: INT
	map_elem: BV[8]
	score, temp: BV[16]
	cond: BOOL
	i = 0

	score = BV{0, 16}

	LABEL LOOP: map_elem = map[i]
	if map_elem == BV{0, 8} goto END_LOOP

	cond = buttons[i]
	if cond goto END_COND
	call temp = concat(BV{0, 8}, map_elem)
	call score = bvadd(score, temp)
	LABEL END_COND: i = i + 1
	goto LOOP
	LABEL END_LOOP: return score

buttons: ARRAY{BOOL}
level: ARRAY{BV[8]}
final_score: INT

level = ARRAY[5]{BV{0, 8}}
level[0] = BV{10, 8}
level[1] = BV{16, 8}
level[2] = BV{72, 8}
level[4] = BV{2, 8}

buttons = ARRAY[3]{false}
buttons[0] = true
buttons[1] = true

call final_score = play_game(buttons, level)
