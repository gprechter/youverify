arr, reversed: ARRAY{INT}
unique: BOOL
define populate(arr: ARRAY{INT}, len: INT):
	i: INT
	i = 0
	LABEL LOOP: if i >= len goto END
	arr[i] = $sym{INT}
	i = i + 1
	goto LOOP
	LABEL END: return

define reverse(arr: ARRAY{INT}, len: INT) -> ARRAY{INT}:
	i, j: INT
	new_arr: ARRAY{INT}
	new_arr = ARRAY[5]{0}
	i = 0
	LABEL LOOP: if i >= len goto END
	j = len - i
	j = j - 1
	new_arr[j] = arr[i]
	i = i + 1
	goto LOOP
	LABEL END: return new_arr

define all_unique(arr: ARRAY{INT}, len: INT) -> BOOL:
	i, j: INT
	e1, e2: INT
	i = 0
	LABEL LOOP: if i >= len goto END
	j = 0
	LABEL LOOP2: if j >= len goto CONTINUE
	if j == i goto CONTINUE
	e1 = arr[i]
	e2 = arr[j]
	if e1 != e2 goto ELSE
	return false
	LABEL ELSE: j = j + 1
	goto LOOP2
	LABEL CONTINUE: i = i + 1
	goto LOOP
	LABEL END: return true

arr = ARRAY[5]{0}
call populate(arr, 5)
call unique = all_unique(arr, 5)
assume unique
call reversed = reverse(arr, 5)
